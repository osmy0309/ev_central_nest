worker_processes 1;
worker_rlimit_nofile 65535;

events {
    #
    # Determines how many clients will be served by each worker process.
    # (Max clients = worker_connections * worker_processes)
    # Should be equal to `ulimit -n`
    #
    worker_connections 65535;

    #
    # Let each process accept multiple connections.
    # Accept as many connections as possible, after nginx gets notification
    # about a new connection.
    # May flood worker_connections, if that option is set too low.
    #
    multi_accept on;

    #
    # Preferred connection method for newer linux versions.
    # Essential for linux, optmized to serve many clients with each thread.
    #
    # Didn’t woork on Mac. — try on prod to see if it works.
    use epoll;
}

http {
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    log_format verbose '[$time_local] $remote_addr - $remote_user "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$gzip_ratio"';
    access_log /dev/stdout verbose;
    error_log /dev/stderr;

    upstream websocket {
        server localhost:3100;
        keepalive 1000;  
    }

    upstream api {
        server localhost:3800;
    }

    server {
        listen 3200;
        location /ocpp {
            proxy_pass http://websocket;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_connect_timeout 60s;
            proxy_send_timeout 600s;
            proxy_read_timeout 600s;
            send_timeout 600s;
            keepalive_timeout 600s;
        }
        location / {
            proxy_pass http://api;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
        }
    }
}